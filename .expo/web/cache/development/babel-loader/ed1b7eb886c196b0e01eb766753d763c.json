{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"e:\\\\AllProjects\\\\ExpoProjects\\\\NewBarCodeScanner\\\\screens\\\\ScanScreen.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from 'react';\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport * as Permissions from 'expo-permissions';\nimport { BarCodeScanner } from 'expo-barcode-scanner';\n\nvar ScanScreen = function (_React$Component) {\n  _inherits(ScanScreen, _React$Component);\n\n  var _super = _createSuper(ScanScreen);\n\n  function ScanScreen() {\n    var _this;\n\n    _classCallCheck(this, ScanScreen);\n\n    _this = _super.call(this);\n\n    _this.getCameraPermissions = function _callee() {\n      var _await$permissions$as, status;\n\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(permissions.askAsync(Permissions.CAMERA));\n\n            case 2:\n              _await$permissions$as = _context.sent;\n              status = _await$permissions$as.status;\n\n              _this.setState({\n                hasCameraPermissions: status === \"granted\",\n                buttonState: 'clicked',\n                scanned: false\n              });\n\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    _this.handleBarCodeScanned = function _callee2(_ref) {\n      var type, data;\n      return _regeneratorRuntime.async(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              type = _ref.type, data = _ref.data;\n\n              _this.setState({\n                scanned: true,\n                scannedData: data,\n                buttonState: 'normal'\n              });\n\n            case 2:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    _this.state = {\n      hasCameraPermissions: null,\n      scanned: false,\n      scannedData: '',\n      buttonState: 'normal'\n    };\n    return _this;\n  }\n\n  _createClass(ScanScreen, [{\n    key: \"render\",\n    value: function render() {\n      var hasCameraPermissions = this.state.hasCameraPermissions;\n      constScanned = this.state.scanned;\n      var buttonState = this.state.buttonState;\n\n      if (buttonState === \"clicked\" && hasCameraPermissions) {\n        return React.createElement(BarCodeScanner, {\n          onBarCodeScanned: scanned ? undefined : this.handleBarCodeScanned,\n          style: StyleSheet.absoluteFillObject,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 40,\n            columnNumber: 9\n          }\n        });\n      } else if (buttonState === \"normal\") {\n        return React.createElement(View, {\n          style: Styles.container,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 48,\n            columnNumber: 13\n          }\n        }, React.createElement(Text, {\n          style: styles.displayText,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 49,\n            columnNumber: 13\n          }\n        }, hasCameraPermissions === true ? this.state.scannedData : \"Request Camera Permission\"), React.createElement(TouchableOpacity, {\n          onpress: this.getCameraPermissions,\n          style: styles.scanButton,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 52,\n            columnNumber: 13\n          }\n        }, React.createElement(Text, {\n          style: styles.buttonText,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 55,\n            columnNumber: 13\n          }\n        }, \"Scan QR Code\")));\n      }\n\n      var styles = StyleSheet.create({\n        container: {\n          flex: 1,\n          justifyContent: 'center',\n          alignItems: 'center'\n        },\n        displayText: {\n          fontsize: 15,\n          textDecorationLine: 'underline'\n        },\n        scanButton: {\n          backgroundColor: \"red\",\n          padding: 10,\n          margin: 10\n        }\n      });\n    }\n  }]);\n\n  return ScanScreen;\n}(React.Component);\n\nexport { ScanScreen as default };","map":{"version":3,"sources":["e:/AllProjects/ExpoProjects/NewBarCodeScanner/screens/ScanScreen.js"],"names":["React","Permissions","BarCodeScanner","ScanScreen","getCameraPermissions","permissions","askAsync","CAMERA","status","setState","hasCameraPermissions","buttonState","scanned","handleBarCodeScanned","type","data","scannedData","state","constScanned","undefined","StyleSheet","absoluteFillObject","Styles","container","styles","displayText","scanButton","buttonText","create","flex","justifyContent","alignItems","fontsize","textDecorationLine","backgroundColor","padding","margin","Component"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport{Text,View,TouchableOpacity,Image,StyleSheet} from 'react-native';\r\nimport * as Permissions from 'expo-permissions';\r\nimport { BarCodeScanner } from 'expo-barcode-scanner';\r\nexport default class ScanScreen extends React.Component{\r\n    constructor(){\r\n        super()\r\n        this.state={\r\n            hasCameraPermissions:null,\r\n            scanned:false,\r\n            scannedData:'',\r\n            buttonState:'normal'\r\n        }\r\n    }\r\n\r\n    getCameraPermissions=async()=>{\r\n    const{status}=await permissions.askAsync(Permissions.CAMERA)\r\n\r\n    this.setState({\r\n        hasCameraPermissions:status ===\"granted\",\r\n        buttonState:'clicked',\r\n        scanned:false \r\n        })\r\n    }\r\n\r\n    handleBarCodeScanned=async({type,data})=>{\r\n    this.setState({\r\n        scanned:true,\r\n        scannedData : data,\r\n        buttonState:'normal'\r\n    })\r\n    }\r\n    render() {\r\n        const hasCameraPermissions=this.state.hasCameraPermissions;\r\n        constScanned=this.state.scanned;\r\n        const buttonState=this.state.buttonState;\r\n        if  (buttonState ===\"clicked\" && hasCameraPermissions) {\r\n        \r\n        return(\r\n        <BarCodeScanner\r\n        onBarCodeScanned={scanned ? undefined : this.handleBarCodeScanned}\r\n        style={StyleSheet.absoluteFillObject}\r\n        />\r\n        );\r\n        }\r\n        else if(buttonState===\"normal\"){\r\n        return(\r\n            <View style={Styles.container}>\r\n            <Text style={styles.displayText}>{\r\n            hasCameraPermissions===true ? this.state.scannedData:\"Request Camera Permission\"\r\n            }</Text>\r\n            <TouchableOpacity\r\n            onpress={this.getCameraPermissions}\r\n            style={styles.scanButton}>\r\n            <Text style={styles.buttonText}>Scan QR Code</Text>\r\n            </TouchableOpacity>\r\n        </View>\r\n        );\r\n        }\r\n    \r\n\r\n        const styles=StyleSheet.create({\r\n        container:{\r\n        flex:1,\r\n        justifyContent:'center',\r\n        alignItems:'center'\r\n        },\r\n        displayText:{\r\n        fontsize:15,\r\n        textDecorationLine:'underline'\r\n        },\r\n        scanButton:{\r\n        backgroundColor:\"red\",\r\n        padding:10,\r\n        margin:10\r\n        },\r\n        })\r\n    }   \r\n}   \r\n"]},"metadata":{},"sourceType":"module"}